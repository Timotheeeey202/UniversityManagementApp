Название: Клиентское приложение для управления базой данных университета Цель: Разработка удобного и безопасного клиентского приложения, позволяющего взаимодействовать с 
базой данных университета, предоставляя доступ к данным в зависимости от роли пользователя. Функциональные возможности: Авторизация: Ввод адреса сервера, 
логина и пароля для подключения к базе данных. Поддержка ролей пользователей с различными уровнями доступа (студенты, преподаватели, методисты, администраторы). 
Проверка корректности данных подключения к серверу SQL. Просмотр и управление данными: Работа с таблицами базы данных через удобный интерфейс на основе DataGrid. 
Функции просмотра, добавления, изменения и удаления записей. Разграничение прав доступа на основе роли пользователя: Студенты могут только просматривать данные. 
Преподаватели, методисты и администраторы имеют расширенные возможности управления записями. Вызов хранимых процедур: Реализация интерфейса для выполнения хранимых процедур 
напрямую из приложения. Примеры процедур: Расчет среднего балла студента. Получение расписания преподавателя. Установка минимальных оценок студентам, пропустившим занятия. 
Удобный и интуитивно понятный интерфейс: Приложение выполнено с использованием технологии WPF (Windows Presentation Foundation). Окна приложения структурированы для легкого 
доступа к функционалу. Каждый пользователь видит только те функции и данные, которые ему доступны в рамках его роли. Технические характеристики: База данных: Microsoft SQL Server. 
Язык разработки: C#. Технология интерфейса: WPF. Уровень доступа: Подключение к базе данных осуществляется с использованием учетных записей SQL Server. 
Архитектура: Серверная часть — SQL Server для хранения данных и выполнения бизнес-логики (хранимых процедур). 
Клиентская часть — WPF-приложение для взаимодействия пользователя с данными. Преимущества приложения: 
Безопасность: Реализована ролевая модель доступа. Гибкость: Возможность вызова сложных хранимых процедур из интерфейса. 
Удобство использования: Простая авторизация и интуитивно понятный дизайн. Расширяемость: Возможность добавления новых функций и ролей при необходимости. 
Пример сценария использования: Студент заходит в приложение, используя свои учетные данные, и просматривает свою успеваемость и посещаемость. 
Преподаватель вызывает процедуру для установки оценок пропустившим занятия студентам. Администратор редактирует расписание занятий и обновляет данные о группах и преподавателях. 
Задача: Обеспечить универсальный инструмент для управления академическими процессами университета, упрощая работу всех участников образовательного процесса.